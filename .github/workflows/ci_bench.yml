name: CI Bench on Ubuntu 24.04
on:
  pull_request:
    branches: [master]
    paths: 'bench/**'

jobs:
  build-tests:
    name: "bench-ubuntu-24.04-${{ matrix.compiler }}-${{ matrix.version }}"
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - { compiler: "gcc",   version: "14.2.0" }
          - { compiler: "clang", version: "18.1.3" }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup C/C++ Environment
        run: |
          set -euo pipefail
          major=$(echo ${{ matrix.version }} | cut -d'.' -f1)
          if [[ "${{ matrix.compiler }}" == "clang" ]]; then
            echo "CC=clang-${major}" >> ${GITHUB_ENV}
            echo "CXX=clang++-${major}" >> ${GITHUB_ENV}
          else
            echo "CC=gcc-${major}" >> ${GITHUB_ENV}
            echo "CXX=g++-${major}" >> ${GITHUB_ENV}
          fi

      - name: Install Common Dependency
        run: |
          sudo apt-get install -y ninja-build

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          clang-tidy: 20
          clang-format: 20

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            example:
              - 'bench/example/**'
            string_view_vs_string:
              - 'bench/string_view_vs_string/**'
            char_classifier:
              - 'bench/char_classifier/**'

      - name: Compile And Run example
        if: steps.filter.outputs.example == 'true'
        run: |
          set -euo pipefail
          cd bench/example/
          cmake -S . -B build -GNinja
          cmake --build build -v -j`nproc`
          ./build/example

      - name: Run cpp-lint-action on example
        if: steps.filter.outputs.example == 'true' && ${{ matrix.compiler }} == 'gcc'
        uses: emmett2020/cpp-lint-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          clang-format-version: 20

      - name: Compile And Run string_view_vs_string
        if: steps.filter.outputs.string_view_vs_string == 'true'
        run: |
          set -euo pipefail
          cd bench/string_view_vs_string/
          cmake -S . -B build -GNinja
          cmake --build build -v -j`nproc`
          ./build/memory_allocation

      - name: Run cpp-lint-action on string_view_vs_string
        if: steps.filter.outputs.string_view_vs_string == 'true' && ${{ matrix.compiler }} == 'gcc'
        uses: emmett2020/cpp-lint-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          clang-format-version: 20

      - name: Compile And Run char_classifier
        if: steps.filter.outputs.char_classifier == 'true'
        run: |
          set -euo pipefail
          cd bench/char_classifier/
          cmake -S . -B build -GNinja
          cmake --build build -v -j`nproc`
          ./build/char_classifier

      - name: Run cpp-lint-action on char_classifier
        if: steps.filter.outputs.char_classifier == 'true' && ${{ matrix.compiler }} == 'gcc'
        uses: emmett2020/cpp-lint-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          clang-format-version: 20

