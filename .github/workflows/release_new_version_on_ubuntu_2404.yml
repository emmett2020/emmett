name: Manually Release New Version On Ubuntu24.04

on:
  workflow_dispatch:
    inputs:
      whether_release_to_github:
        description: wheter upload real products to Github Release page
        required: true
        default: false
        type: boolean

env:
  CC: gcc-14
  CXX: g++-14
  package_name: cpp_lint_action

permissions:
  contents: write
  discussions: write

jobs:
  build-unit-tests-package:
    name: "ubuntu-24.04-build-unit-tests-package"
    runs-on: ubuntu-24.04

    outputs:
      artifact_name: ${{ steps.artifact.outputs.artifact_name }}
      distribution_name: ${{ steps.artifact.outputs.distribution_name }}
      release_version: ${{ steps.artifact.outputs.release_version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Compilation Dependencies
        run: |
          sudo apt install -y ninja-build      \
                              libboost-all-dev \
                              libgit2-dev

      - name: CMake
        run: cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE="Release"

      - name: Compile
        run: cmake --build build -v -j`nproc`

      - name: Run Unit Tests
        run:  ./build/tests/test

      - name: Prepare Artifacts
        id: artifact
        run: |
          set -euo pipefail

          # Check version string.
          release_version=$(cat VERSION | sed '/^$/d' | sed 's/[[:space:]]*$//')
          if [[ ! "${release_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "VERSION: ${release_version} has a unrecognized format."
            exit 1
          fi
          echo "release_version=${release_version}" >> ${GITHUB_OUTPUT}

          # We will use release_version as tag name. If it already exists, just
          # exit this program with error.
          if git rev-parse "v${release_version}" >/dev/null 2>&1; then
            echo "Tag v${release_version} exists."
            exit 1
          fi

          release_version_str=$(echo ${release_version} | tr '.' '_' | tr '-' '_')
          sha_short=$(echo "${{ github.sha }}" | cut -c1-8)

          artifact_name="${package_name}_${release_version_str}_ubuntu_24_04_${{ runner.arch }}_${sha_short}"
          echo "artifact_name=${artifact_name}" >> ${GITHUB_OUTPUT}

          distribution_name="${package_name}_${release_version_str}_ubuntu_24_04_${{ runner.arch }}"
          echo "distribution_name=${distribution_name}" >> ${GITHUB_OUTPUT}

          echo "::group::Install packaging dependencies"
          bash scripts/linux/ubuntu/install_lddtree.sh
          bash scripts/linux/ubuntu/install_patchelf.sh
          echo "::endgroup::"

          # package
          bash scripts/linux/ubuntu/x64/manual_distribution/with_compiler/package.sh

          # rename
          mv build/${package_name}.tar.gz build/${artifact_name}.tar.gz

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.artifact.outputs.artifact_name }}.tar.gz"
          path: build/${{ steps.artifact.outputs.artifact_name }}.tar.gz
          if-no-files-found: error

  run-regression-tests:
    needs: [build-unit-tests-package]
    uses: ./.github/workflows/run_regression_tests_on_ubuntu.yml
    with:
      artifact-name: "${{ needs.build-unit-tests-package.outputs.artifact_name }}.tar.gz"

  release-artifacts-to-github:
    needs: [build-unit-tests-package, run-regression-tests]
    uses: ./.github/workflows/release_artifacts.yml
    if: "${{ inputs.whether_release_to_github == true }}"
    with:
      artifact-name: "${{ needs.build-unit-tests-package.outputs.artifact_name }}.tar.gz"
      distribution-name: "${{ needs.build-unit-tests-package.outputs.distribution_name }}.tar.gz"
      release-version: "${{ needs.build-unit-tests-package.outputs.release_version }}"

